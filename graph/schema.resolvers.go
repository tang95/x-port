package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/tang95/x-port/graph/model"
)

// Owner is the resolver for the owner field.
func (r *componentResolver) Owner(ctx context.Context, obj *model.Component) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Components is the resolver for the components field.
func (r *componentResolver) Components(ctx context.Context, obj *model.Component, page model.PageInput, filter *model.ComponentFilter) ([]*model.Component, error) {
	panic(fmt.Errorf("not implemented: Components - components"))
}

// ListComponent is the resolver for the listComponent field.
func (r *queryResolver) ListComponent(ctx context.Context, page model.PageInput, filter *model.ComponentFilter) (*model.ComponentConnection, error) {
	panic(fmt.Errorf("not implemented: ListComponent - listComponent"))
}

// GetComponent is the resolver for the getComponent field.
func (r *queryResolver) GetComponent(ctx context.Context, id string) (*model.Component, error) {
	panic(fmt.Errorf("not implemented: GetComponent - getComponent"))
}

// Component returns ComponentResolver implementation.
func (r *Resolver) Component() ComponentResolver { return &componentResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type componentResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
