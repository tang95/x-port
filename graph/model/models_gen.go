// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Component struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description *string                `json:"description,omitempty"`
	Type        string                 `json:"type"`
	Lifecycle   string                 `json:"lifecycle"`
	Owner       *Team                  `json:"owner"`
	Tier        string                 `json:"tier"`
	Links       []*Link                `json:"links,omitempty"`
	Tags        []string               `json:"tags,omitempty"`
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	Components  *ComponentConnection   `json:"components"`
	CreatedAt   time.Time              `json:"createdAt"`
	UpdatedAt   time.Time              `json:"updatedAt"`
}

type ComponentConnection struct {
	Total int          `json:"total"`
	Data  []*Component `json:"data,omitempty"`
}

type ComponentFilter struct {
	Keywords  *string  `json:"keywords,omitempty"`
	Tier      *string  `json:"tier,omitempty"`
	Type      *string  `json:"type,omitempty"`
	Lifecycle *string  `json:"lifecycle,omitempty"`
	Owner     *string  `json:"owner,omitempty"`
	Tags      []string `json:"tags,omitempty"`
}

type Link struct {
	Title string `json:"title"`
	URL   string `json:"url"`
	Type  string `json:"type"`
}

type PageInput struct {
	Page int `json:"page"`
	Size int `json:"size"`
}

type Query struct {
}

type SortInput struct {
	Field     string        `json:"field"`
	Direction SortDirection `json:"direction"`
}

type Team struct {
	ID      string          `json:"id"`
	Name    string          `json:"name"`
	Members *UserConnection `json:"members"`
}

type TeamConnection struct {
	Total int     `json:"total"`
	Data  []*Team `json:"data,omitempty"`
}

type User struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Avatar      *string `json:"avatar,omitempty"`
}

type UserConnection struct {
	Total int     `json:"total"`
	Data  []*User `json:"data,omitempty"`
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
