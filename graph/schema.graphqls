scalar Time
scalar Map

type Query {
    listComponent(page: PageInput!, sort: [SortInput!], filter: ComponentFilter): ComponentConnection!
    getComponent(id: ID!): Component!
    listTeam(page: PageInput!, sort: [SortInput!]): TeamConnection!
    getTeam(id: ID!): Team!
    listUser(page: PageInput!, sort: [SortInput!]): UserConnection!
    getUser(id: ID!): User!
}

input SortInput {
    field: String!
    direction: SortDirection!
}

enum SortDirection {
    ASC
    DESC
}

input PageInput {
    page: Int!
    size: Int!
}

type Link {
    title: String!
    url: String!
    type: String!
}

type Component {
    id: ID!
    name: String!
    description: String
    type: String!
    lifecycle: String!
    owner: Team!
    tier: String!

    links: [Link!]
    tags: [String!]
    annotations: Map
    components(page: PageInput!, sort: [SortInput!], filter: ComponentFilter): ComponentConnection!
    createdAt: Time!
    updatedAt: Time!
}

input ComponentFilter {
    keywords: String
    tier: String
    type: String
    lifecycle: String
    owner: String
    tags: [String!]
}

type ComponentConnection {
    total: Int!
    data: [Component!]
}

type User {
    id: ID!
    name: String!
    description: String
    avatar: String
}

type UserConnection {
    total: Int!
    data: [User!]
}

type TeamConnection {
    total: Int!
    data: [Team!]
}

type Team {
    id: ID!
    name: String!
    members(page: PageInput!, sort: [SortInput!]): UserConnection!
}
